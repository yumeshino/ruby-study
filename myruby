[Ruby] pryやirbで日本語入力を可能にする

rbenv利用時の場合
# 適用したいrubyバージョンが既にインストール済みの場合は一度uninstall
$ rbenv uninstall 2.1.1

# readlineのinstall
$ brew install readline
$ brew link readline --force

# readlineを利用してruby再install
$ RUBY_CONFIGURE_OPTS="--with-readline-dir=$(brew --prefix readline)"
$ rbenv install 2.1.1
これで日本語入力可能に。
$ pry
[1] pry(main)> 'ぷらい'
=> "ぷらい"

$ irb
irb(main):001:0> 'あいあーるびー'
=> "あいあーるびー"

pryやirbはREPLと呼ぶ
->Lead、リーバル、Printloopの略で入力されたコードを読んで評価して表示することを繰り返すツール
pryはコードをカラーリングしたり自動t形にインデントをいれて読むやすくしてくれる

コンパイル
コンパイルとは、特定のプログラミング言語を用いて記述されたコンピュータープログラムを他の言語 (普通はコンピューターが実行できるバイナリ言語) を用いて記述された同じプログラムに形を変えることである。


rubyの特徴
・インタプリタ型言語
  →プログラマーが明示的にソースコードをコンパイルスルスル作業がない
    実際にコードを実行するタイミングで逐一機械語にコンパイルしてくれるため
    手軽にコードを実行して結果を確認することができる
・オブジェクト指向言語
・構文の自由度が高い

stringオブジェクトの解説
・rubyではオブジェクトがなんのクラスであるかをクラスメソッドで確認することができる
・直接記述できる値のことをリテラルと呼ぶ。リテラルで書く以外にstringクラスからオブジェクトを生成することもできる
・オブジェクトに備わったメソッドを呼び出すにはオブジェクトの後ろにドットをつけて続けてメソッド名を繋げる
・一般的なプログラミング言語ではメソッドを呼び出す際にかっこをつける物が多いがrubyはかっこを省略することができる。rubyでは引数がないメソッドはかっこは省略するのが望ましい
・pryでは変数名を入力してenterを押すことで変数の中身を確認することができる
・rubyでは別のクラスのオブジェクトに変換する場合にtoから始まるメソッドが用意されている。他のクラスのオブジェクトに変換することで変換後のクラスに実装されたメソッドや構文を使用することができる
・<＜を使って文字を連結させた場合には変数の中身の文字列も変更される。同じことを＋演算子で行うには連結した結果を変数に代入する
・文字列の中の式を展開するには文字列をダブルクォートで括る必要がある
  [4] pry(main)> two = '二'
  => "二"
    [5] pry(main)> "1 + 1は#{two}"
  => "1 + 1は二"
  

クラス
オブジェクトの元となる雛形

オブジェクト
データと指定の処理を行うメソッドをまとめたもの

メソッド
特定の処理を行う機能のこと

レシーバ
レシーバーは特に Ruby の用語というわけではなく、オブジェクト指向一般に使われる用語です。
意味は「 . の左側」
例えば以下の例では car が run メソッドのレシーバーとなります。
car.run

stringオブジェクト
文字列を扱うオブジェクト
文字列の場合はstringクラスを元にオブジェクトが作成されstringクラスの定義された機能を呼び出すことができる

methodsメソッド
レシーバのオブジェクトが持つメソッドを表示してくれる
メソッド名を忘れてしまった場合やどんなメソッドが実装せれているのかを知りたい場合に利用できる
-----------------------------------------------------------------------------
Symbolオブジェクト
ruby独自のオブジェクト
使うときは頭にコロンをつける。ソースコード上では文字列のように見えるがrubyの内部では整数として扱われる。内部では整数として処理することで高速に処理することができる。同じシンボル名は同じオブジェクトを指すためメモリの使用率を抑えるkとができる

ハッシュ
ハッシュは配列と同じく複数のオブジェクトへの参照をまとめて管理することが出来るオブジェクトです。配列と大きく異なる点は、配列がインデックスを使って要素を区別していたのに対し、ハッシュではキーと呼ばれるものを使用します。
--------------------------------------------------------------------------
リテラル
数字の1や文字列"hello world"のようにRubyのプログラムの中に直接記述できる値の事をリテラルといいます。

ブロック
ブロックとはメソッドの呼び出しの際に渡すことができる処理のかたまり
[1] pry(main)> 3.times do |i|
[1] pry(main)*   puts i
[1] pry(main)* end
0
1
2
=> 3
上記の例だとdo〜endまでがひとかたまりの処理でこれをブロックという
timesオブジェクトではIntegerオブジェクトの数だけ渡したブロックが繰り返し実行されブロックの引数には一から順に数字が渡される

[2] pry(main)> 3.times { |num| puts num }
0
1
2
=> 3
上記のようにdo〜endの代わりにか{}を使用しても同じ意味になる
複数行にまたがる処理を含むブロックの場合はdo-endを使用し、1行だけの短い時間処理の場合には{}を使用するのが好ましい



Integer, Floatオブジェクト
数字のリテラル。整数、１（Integer）。小数、1.5（Float）
数字リテラルは四則演算を行うことができる


・IntegerとFloatで計算を行った結果はFloatオブジェクトになる
・Floatでは小数点以下を四捨五入したり切り上げ切り下げするメソッドが用意されている


Enumeratorオブジェクト
Integerオブジェクトはtimeメソッドを使うことでEnumeratorオブジェクトを生成する
Enumeratorを使用することで指定回数、同じ処理を繰り返すことができる
[6] pry(main)> 3.times
=> #<Enumerator: ...>
-------------------------------------------------------------------------------
Array
一般的に配列とも呼ばれている

要素
arrayオブジェクト内の各データのことを要素と呼ぶ

Arrayオブジェクト
複数のオブジェクトを格納できるオブジェクト
[1] pry(main)> []
=> []
[2] pry(main)> [1,2,3]
=> [1, 2, 3]
[3] pry(main)>
異なるクラスのオブジェクトを混在して格納することもできる
[3] pry(main)> [1,'日本',1.5]
=> [1, "日本", 1.5]



%w記法
下の二つは同じ意味
[4] pry(main)> ['文','字']
=> ["文", "字"]
[5] pry(main)> %w[文 字]
=> ["文", "字"]
このように％wの記法の場合は文字をシングルクォートで囲う必要がなく各文字をカンマで区切る代わりにスペースで区切る
w（小文字）・・・シングルクォートで囲ったのと同じ意味になる
W（大文字）・・・ダブルクォートで括ったのと同じ動作になる
                  変数を展開することもできる
[4] pry(main)> one = 1
=> 1
[5] pry(main)> two = 2
=> 2
[6] pry(main)> %W[a#{one} b#{two}]
=> ["a1", "b2"]

Symbolの配列には%iを使する
[7] pry(main)> %i[a b c]
=> [:a, :b, :c]
文字列やsymbolのデータで配列を初期化する場合には積極的に%記法を使う

繰り返し処理

eachメソッド
arrayオブジェクトのeachメソッドを呼び出しブロックを渡すと配列の各要素を取り出して処理を行うことができる
[1] pry(main)> %w[あ い う].each do |str|
[1] pry(main)*   puts str
[1] pry(main)* end
あ
い
う
=> ["あ", "い", "う"]

breakメソッド
breakを使って途中で終了させることができる
[2] pry(main)> %w[あ い う].each do |str|
[2] pry(main)*   break if str =='う'
[2] pry(main)*   puts str
[2] pry(main)* end
あ
い
=> nil

nextメソッド
一文だけスキップさせたい場合に使う
[3] pry(main)> %w[あ い う].each do |str|
[3] pry(main)*   next if str =='い'
[3] pry(main)*   puts str
[3] pry(main)* end
あ
う
=> ["あ", "い", "う"]

mapメソッド
各要素を格納した配列を作ることができる
mapはブロック内で開始した値を集めて新しい配列を返す
一般的な言語では戻り値を値で返す場合にはreturnを使用する物が多いがrubyではブロックの最終行の式の結果が自動的に戻り値として返されるためreturnを省略することができる
[2] pry(main)> %w[あ い う].map { |str| "(#{str})" }
=> ["(あ)", "(い)", "(う)"]

多重配列
配列の各要素は個々の変数に格納することができる
[1] pry(main)> foo,bar = [1,2]
=> [1, 2]
[2] pry(main)> foo
=> 1
[3] pry(main)> bar
=> 2

配列にせずに値をカンマ区切りで並べることでも各変数に格納できる 
[4] pry(main)> foo,bar = 1,2
=> [1, 2]
[5] pry(main)> foo
=> 1
[6] pry(main)> bar
=> 2

右側の値が足りない場合は変数にnilが格納される
[7] pry(main)> foo,bar = 1
=> 1
[8] pry(main)> foo
=> 1
[9] pry(main)> bar
=> nil
-----------------------------------------------------
Hashオブジェクト
キーとバリューの組み合わせで表現できるオブジェクト

任意の数のキーとバリューををもたせることができる
[11] pry(main)> user1 = {name: '一郎'}
=> {:name=>"一郎"}
[12] pry(main)> user2 = {id: 2, name: '二郎'}
=> {:id=>2, :name=>"二郎"}

キー名にコロンをつけた形でデータを定義した場合はキーの部分がsymbolになる
[13] pry(main)> user1[:name]
=> "一郎"
[14] pry(main)> user2[:id]
=> 2
[15] pry(main)> user2[:name]
=> "二郎"

この書き方ではキーをstringで指定しても値を参照できない
[16] pry(main)> user1['name']
=> nil
明示的にキーをstringで表す必要がある場合には次のように書く
[17] pry(main)> user3 = { 'id' =>3, 'name' =>'三郎' }
=> {"id"=>3, "name"=>"三郎"}
[18] pry(main)> user3['id']
=> 3
[19] pry(main)> user3['name']
=> "三郎"

バリューの部分には任意のオブジェクトを入れることができるのでhashで階層構造を作ることができる
[3] pry(main)> user4 = {
[3] pry(main)*   name: '四郎',
[3] pry(main)*   test_result: {
[3] pry(main)*     math: 70,
[3] pry(main)*     science: 80
[3] pry(main)*   }
[3] pry(main)* }
=> {:name=>"四郎", :test_result=>{:math=>70, :science=>80}}
[4] pry(main)> user4[:test_result][:math]
=> 70

特定のキーの位置に値を代入することで値を書き換えることができる
[5] pry(main)> user4[:test_result][:math] = 90
=> 90
[6] pry(main)> user4
=> {:name=>"四郎", :test_result=>{:math=>90, :science=>80}}

keysメソッド・valuesメソッド
Hashオブジェクトではkeysメソッドでキーの配列、valueメソッドで値の配列を取得することができる
=> [:name, :test_result]
[8] pry(main)> user4.values
=> ["四郎", {:math=>90, :science=>80}]

Hashオブジェクトでもeachメソッドを呼び出すことができ、Hashのeachメソッドではブロックに2つの値が渡される。1つ目がキーの値で2つ目がバリューの値
[9] pry(main)> user4.each do |k, v|
[9] pry(main)*   puts "#{k} = #{v}"
[9] pry(main)* end
name = 四郎
test_result = {:math=>90, :science=>80}
=> {:name=>"四郎", :test_result=>{:math=>90, :science=>80}}

一部のキーバリューを削除するにはdeleteメソッドで第一引数に削除対象のキーを指定する
[10] pry(main)> user4.delete(:test_result)
=> {:math=>90, :science=>80}
[11] pry(main)> user4
=> {:name=>"四郎"}
-------------------------------------------------------------
Rangeオブジェクト
Rangeオブジェクトはある値の範囲を扱うためのオブジェクト
[12] pry(main)> 1..3
=> 1..3
[13] pry(main)> (1..3).class
=> Range

ドットを3つにすることで最後の値は含まないレンジになる
[14] pry(main)> (1...3).to_a
=> [1, 2]
.to_aメソッドでArrayオブジェクトに変換できる

アルファベットの並びも作成できる
[15] pry(main)> ('a'..'z').to_a
=> ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

Rangeオブジェクトでもeachメソッドで各値を取り出して処理を行うことができる
[16] pry(main)> (1..31).each { |day| puts "#{day}日" }
1日
2日
3日
4日
5日
6日
7日
8日
9日
10日
11日
12日
13日
14日
15日
16日
17日
18日
19日
20日
21日
22日
23日
24日
25日
26日
27日
28日
29日
30日
31日
=> 1..31
---------------------------------------------------------------------
 Time, Dateオブジェクト
 日付や時間を扱う時に使う

 Timeオブジェクトで現在日時を取得するにはTimeクラスに対してnowメソッドを実行
 [18] pry(main)> Time.now
=> 2022-08-04 09:56:10 +0900

時刻には環境に応じてタイムゾーンが設定されておりどのタイムゾーンで確認できる
[19] pry(main)> Time .now.zone
=> "JST"
タイムゾーンは特に環境設定の行なっていなければruby実行環境のシステムのタイムゾーンが使用される

Timeオブジェクトをnewメソッドで作成する場合は日付や時間を指定することで任意の日時のTimeオブジェクトを作成することができる
[20] pry(main)> datetime = Time.new(2018,2,1,12,30)
=> 2018-02-01 12:30:00 +0900

strftimeメソッドを使用することで日付フォーマットの文字を作成することができる
引数に指定しているフォーマット文字列には様々なものがある
ruby strftime キーワード
[21] pry(main)> datetime.strftime('%Y年 %m月 %d日 %H時 %M分')
=> "2018年 02月 01日 12時 30分"

Dateオブジェクトは日付だけを取り扱い時間のデータが不要な場合に使用する
rubyの環境ではいきなりDateクラスを使用することができない
require'date'でライブラリを読み込むとDateクラスを使用できる
[23] pry(main)> require'date'
=> true
[24] pry(main)> Date
=> Date

todayメソッドで今日の日付を取得できる
[25] pry(main)> Date.today
=> #<Date: 2022-08-04 ((2459796j,0s,0n),+0s,2299161j)>

Dateオブジェクトをnewメソッドで作成する場合は日付や時間を指定することで任意の日時のDateオブジェクトを作成することができる
[27] pry(main)> Date.new(2019,4,1)
=> #<Date: 2019-04-01 ((2458575j,0s,0n),+0s,2299161j)>

フォーマットもtimeの時とほぼ同様
[28] pry(main)> Date.new(2019,4,1).strftime('%Y年 %m月 %d日')
=> "2019年 04月 01日"
---------------------------------------------------------------------------
True、Falseオブジェクト
rubyではtrueやfalseもオブジェクトの一種として扱われる
一般的にブール値と呼ぶ
使い道は主に条件分岐で使用される
[30] pry(main)> true.class
=> TrueClass
[31] pry(main)> false.class
=> FalseClass

比較演算子やメソッドの結果として返される
[32] pry(main)> 1 == 1
=> true
[33] pry(main)> 1 == 2
=> false

値が異なる場合にtrue、同じである場合にfalseを返すには！マークを使用する
[34] pry(main)> 1 != 1
=> false
[35] pry(main)> 1 != 2
=> true

true,falseを反転する方法として変数の前に！をつける方法がある
[36] pry(main)> true_val = true
=> true
[37] pry(main)> false_val = false
=> false
[38] pry(main)> !true_val
=> false
[39] pry(main)> !false_val
=> true

nilメソッド
値がnilであるかを判定する
[40] pry(main)> val = nil
=> nil
[41] pry(main)> val.nil?
=> true
[42] pry(main)> val = :a
=> :a
[43] pry(main)> val.nil?
=> false
-----------------------------------------------------------------------------
変数
あらゆるオブジェクトを格納することができる
変数名は英字から始まり英数字やアンダースコアを使って定義する。英字は全て小文字

定数
一度定義したら値を変更しないオブジェクトのいれもの
定数を作成する場合は大文字の英字や数字を使用する
---------------------------------------------------------------------------
ヒアドキュメント
複数業にまたがる長い文章の文字列を扱いたい場合に便利な機能
<<EOS・・・・・ダブルクォートで囲まれたのと同じ動きで式は展開される
<<'EOS'・・・・シングルクォート囲まれたのと同じ動きになり式は展開されない
<<"EOS"・・・・ダブルクォートで括っているため式は展開される
<<-"EOS"・・・・終端のEOSを行の先頭に書かなくてよくなる。主にプログラムを書いて 
                インデントを揃えたい場合に使用する。なのでこれ以外の終端のEOSは
                先頭に書かないと施錠に動作しない


コメント
ソースコード上にメモとして説明書きとして残して起きたい場合に使用するもの
rubyのプログラム実行としては無視される
＃一行のコメント
＃シャープ以降がコメントアウトされるので途中から書くこともできる
=begin

puts '複数行にまたがってコメントアウトしたい場合'

=end
----------------------------------------------------------------------------
if文
式の評価の結果が真である場合に特定の処理を実行するもの
country = 'ja'

if country == 'ja'
  puts '日本'
end
countryという変数の中身がjaであったら日本と表示するプログラム
if文はifの後に評価対象の式を書き、その下に評価結果が真だった場合に実行する処理を書く。最後にif文を閉じるendを記載する

多言語同様、複数の条件を並べることもできる
country = 'us'

if country == 'ja'
  puts '日本'
elseif country == 'us'
  puts 'アメリカ'
else
  puts 'その他の国'
end
          
rubyではnilとfalseが偽として評価され、それ以外のものは全て真として評価され
下記の式だと三つ目が真として評価される
if nil
  puts 'nilは真'
end
if false
  puts 'falseは真'
end
if 0
  puts '0は真'
end



unless文
ifとはが逆に偽である場合に処理を実行する
下記の式だとひとつ目とふたつ目が真として評価される
unless nil
  puts 'nilは偽'
end
unless false
  puts 'falseは偽'
end
unless 0
  puts '0は偽'
end


後置if、後置unless
一行で条件分岐と処理を書く場合に利用される
実行したい文の後ろにifと条件を書くことで条件の結果が真の時に手前の処理が実行される
[44] pry(main)> country = 'ja'
=> "ja"
[45] pry(main)> '日本' if country == 'ja'
=> "日本"
[46] pry(main)> '日本' if country == 'j'
=> nil

unlesssの場合も同様
[1] pry(main)> country = 'us'
=> "us"
[2] pry(main)> 'その他の国' unless country == 'jp'
=> "その他の国"


三項演算子
はてなの手前の式の結果が真だった場合にコロンの前の値を返し、偽であった場合にコロンの後ろの値を返す
結果の真偽によって該当した文字列がplaceに変数代入されている
[3] pry(main)> place = country == 'ja' ? '日本' : '海外'
=> "海外"
[4] pry(main)> country = 'ja'
=> "ja"
[5] pry(main)> place = country == 'ja' ? '日本' : '海外'
=> "日本"
[6] pry(main)> place
=> "日本"
[7] pry(main)> place = country == '' ? '日本' : '海外'
=> "海外"
[8] pry(main)> place
=> "海外"


戻り値
rubyではif文の処理の最後の式の評価結果が戻り値として返される
複数行の処理であった場合は最後の式の結果が開始される
下記の条件分岐では’ふつう'が結果として返される
score = 60

result = if score >= 80
            '優秀'
        elseif score >= 50
            '普通'
            'ふつう'
        else
            'やや劣る'
        end
puts result
----------------------------------------------------------------------------
擬似変数
true、false、nilのこと等を指す
true、falseは主に条件分岐の判断や何かの設定のON、OFFを表すようなフラグに使用される
nilは何もないことを表すオブジェクトでrailsにおいてはDBに問い合わせた結果、該当するデータがない場合にnilが入るケースがある
変数の初期化に置いて初期値をnilとして設定することもある

論理演算子

&&演算子
条件式をand 2つで繋げることでif文で全てがtrueだった場合にtrueと評価される
[9] pry(main)> true if true && true
=> true

いずれかがfalseやnilとなった場合はnilが返る
andで繋げた条件式は左から評価され、falseやnilがあった時点で以降の評価は行わない為、1つめの式は後のtrueは実際には評価されていない
[10] pry(main)> true if false && true
=> nil
[11] pry(main)> true if true && nil
=> nil

or演算子
条件式をorで繋げた場合、いずれかtrueの場合にtrueと判定するもの
trueと判定された時点で以降の式を評価しない
なので2つめの式は実際にはfalseは評価されていない
[12] pry(main)> true if false || true
=> true
[13] pry(main)> true if true || false
=> true

変数をorで繋げた場合にtrueと判定された変数の値が返るため、左から評価していって
nilでもfalseでもなかった値を別の変数に入れることができる
[14] pry(main)> val1 = nil
=> nil
[15] pry(main)> val2 = 100
=> 100
[16] pry(main)> val3 = val1 || val2
=> 100

上の特性を利用して、代入先の変数がnilかfalseである場合には ||= の右側にある値を変数にセットできる。
[18] pry(main)> var = nil
=> nil
[19] pry(main)> var ||= 'value'
=> "value"
[20] pry(main)> var
=> "value"

既に値がはいっている場合には代入されない
[23] pry(main)> var = 'sone value'
=> "sone value"
[24] pry(main)> var ||= 'new value'
=> "sone value"
[25] pry(main)> var
=> "sone value"

not演算子
変数の頭に！をつけることでtrue、falseの評価を反転させる
[26] pry(main)> !true ? '真' : '偽'
=> "偽"
[27] pry(main)> !false ? '真' : '偽'
=> "真"
------------------------------------------------------------------------------
 case文
 オブジェクトが複数の候補のどれに該当するかを判断して条件分岐させる際に使用する
 case文も分岐した後の最後の結果を返すので結果がsymbolという変数に格納される
 if文でelse ifを大量に書くよりも簡潔に書くとができるのでオブジェクトがいずれかに該当するのかを評価したい場合によく使われる 
value = 5

symbol = case value
            when 1
              :one
            when 2
              :two
            when 3
              :three
            when 4
              :four
            when 5
              :five
            else
              :other
          end

puts symbol


caseのwhenの各条件にはrangeオブジェクトもかける
value = 11

symbol = case value
            when 1..5
              :low
            when 6..10
              :high
            else
              :invalid
          end

puts symbol


カンマ区切りで複数の値をおくこともできる
value = 'りんご'

symbol = case value
            when 'りんご','なし','キウイ','もも'
              '果物'
            when 'キャベツ','トマト','ねぎ'
              '野菜'
            else
              '該当なし'
          end

puts symbol
--------------------------------------------------------------------------
メソッド定義

引数のないメソッド定義
rubyでメソッドを定義する場合はDEFと書いた後ろの後にメソッド名を書く
その下にインデントして処理を記述し最後にENDでと閉じる
def hello 
  puts 'Hello!'
end

hello

これを呼び出すにはhelloメソッドが定義された箇所より下でhelloと記述する必要がある
メッソドの定義より上で呼び出した場合にはメソッド未定義となりエラーになる
hello

def hello 
  puts 'Hello!'
end


引数のあるメソッド定義
引数のあるメソッドであメソッド名にかっこをつけてその中に仮引数を書く
仮引数とはメソッド定義で引数の受取先として記載する変数のこと
helloメソッドのnameが仮引数
かっこをつけて変数名を書いた場合には必ず呼び出す際に値をひとつ渡す
def hello (name)
  puts "Hello, #{name}."
end

hello('kojima')


仮引数にデフォルト値を設定する
仮引数にはデフォルト値を設定しておくことができでデフォルト値が設定されている場合にはメソッドの呼び出しで引数の指定を省略することができる
下の条件だとデフォルトの値としてUnknownを設定しているため呼び出す際に引数を省略するとUnknownがセットされる。
引数を明示的に指定した場合それが使用される
def hello (name = 'Unknown')
  puts "Hello, #{name}."
end

hello  //Hello,Unkownと表示される

hello('kojima')  //Hello,kojimaと表示される


キーワード引数
メソッドを呼び出す際に引数のラベルを指定して値を渡すことができる
メリットは呼び出し側から何の引数であるかがわかりやすいこと
仮引数をハッシュのような形で設定しておこことでメソッドを呼び出す際にラベルを指定して引数を渡すことができる
引数を省略した場合は予め設定されたUnknownが仮引数にセットされる
def hello (name: 'Unknown')
  puts "Hello, #{name}."
end

hello(name: 'kojima')

hello


メソッドの戻り値
rubyではメソッド内で最後に評価された式の結果が自動的に戻り値となるためreturnを省略することができる
sum2メソッドのように最後の式ではなくもっと手前で値を返たい場合はreturnと書いて後ろに戻値を指定するとその値がメソッドの呼び出し元に返される
なので下の表示結果はどちらも4になる
def sum(val1,val2)
  val1 + val2v
end
puts sum(1,3)

def sum2(val1, val2)
  return val1 + val2 //最後の式ではなくreturnで指定しているのでここが返される

  val1 * val2 //ここはreturnより後ろになるので評価されない
end

puts sum2(1,3)


可変長引数
下に定義されているsumメソッドは引数に渡された数字を全て足した結果を返すもの
仮引数を設定する際に頭にアスタリスクをつけると複数の引数が渡された場合にvaluesという変数にarrayの形式で値が渡される
def sum(*values)
  values.inject { |total, n| total + n }
end
puts sum(1,2,3,4,5) //表示結果は


injectメソッド
injectメソッドはarrayメソッドに備わっているメソッドで各値を足した結果を計算するために使用する
injectメソッドに渡されたブロックは2つの値を受け取る
上の式を参照すると1回目の処理ではtotal変数にarrayの1つ目の値である1が入り、nにarrayの2つ目の値である2が入る。そしてブロック内で行った計算結果が2回目のループでtotalに入り、nはarrayの3つ目の値が入る。あとはこの繰り返し。
3回目のループでは2回目の集計結果がtotalに入り、nにarrayの4つ目の値が入る
結果、引数に渡された数だけ足し算が行われ、結果がメソッドの呼び出し元に返る


仮引数にアスタリスク1つつけた場合はarrayでデータを受け取るが
2つつけた場合はhash形式で引数を受け取る
def some_method(**kv_values)
  puts kv_values  
end

some_method(param1: aaa, param2: bbb) //表示結果 {:param1=>:aaa,:param2=>:bbb}
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Procオブジェクトとyield

Procオブジェクト
do-endや中かっこで作成したブロックをオブジェクト化したもの
[4] pry(main)> proc = Proc.new { puts 'hoge' }
=> #<Proc:0x00007fe447075660@(pry):4>
[5] pry(main)> proc.class 
=> Proc
[6] pry(main)> proc.call
hoge
=> nil
procオブジェクトを作成する際に渡したブロックはcallメソッドで実行することができる


procではブロックの外側にある変数を参照することができる
[13] pry(main)> hoge = :hoge
=> :hoge
[14] pry(main)> proc = Proc.new { puts hoge }
=> #<Proc:0x00007fe44626ac28@(pry):13>
[15] pry(main)> proc.call
hoge
=> nil
[16] pry(main)> hoge = :fuga
=> :fuga    
[17] pry(main)> proc.call
fuga
=> nil
変数の値が変わった場合はブロック内で参照しているオブジェクトも同じものであるため変更後の値が表示される


未定義の変数をブロックで使用した場合
procの生成時はエラーにならないが呼び出した時点で変数が未定義の為エラーになる
[1] pry(main)> proc = Proc.new { puts hoge }
=> #<Proc:0x00007f86ad828e18@(pry):1>
[2] pry(main)> proc.call
NameError: undefined local variable or method `hoge' for main:Object
from (pry):1:in `block in __pry__'

後から値を入れて改めて呼び出してもエラーになるため、procでブロック外の値を参照するにはprocオブジェクトを作成する前の時点で変数が定義されていなければならない
[5] pry(main)> hoge = :hoge
=> :hoge
[6] pry(main)> proc.call
NameError: undefined local variable or method `hoge' for main:Object
from (pry):1:in `block in __pry__'


yield
メソッド呼び出しで渡されたブロックをメソッドの中で実行する際に使用するもの
def yield_test      //yield_testというメソッドを定義
  yield(1,2)        //メソッド処理の中でyieldを呼んでいる
end

puts yield_test { |a,b| a + b }      //yield_testの後にブロックを渡しているこのブロックのパラメータにはaとbという変数が定義されておりa＋bの結果を返す処理が書いてある
yieldメソッドを呼び出した場合はメソッド呼び出しの際に引数に渡されたブロックを呼び出すことを意味する
結果、yieldメソッドに渡した引数はブロックパラメータとして渡されaに1、bに2が入り足し算が実行されyieldメソッドの呼び出し元に足し算の結果の3が返ることになる

特定の処理をブロックという形でメソッドに渡し、メソッド内の任意のタイミングでそのブロックを実行できる


メソッドの仮引数の最後に＆をつけた仮引数を定義することでメソッド呼び出しの時に渡されたブロックをprocオブジェクトで受け取ることができる
先ほどのyieldを使った記法はこのprocオブジェクトを受け取ることを省略した記法になる
def yield_test(&proc)
  proc.call(1,2)
end

puts yield_test { |a,b| a + b }


メソッド内でblock＿givenメソッドを呼び出すことでにメソッドにブロックが渡されたかを判定することができる
block＿givenメソッドの戻り値がtrueであればブロックが渡されと判断し、falseであれば渡されなかったと判断することができる
def yield_test
  if block_given?
    yield
  else
    puts 'ブロックが渡されませんでした'
  end
end

yield_test { puts 'ブロックを渡しました' }

yield_test
----------------------------------------------------------------------
クラス
オブジェクトを作るためのひな型でデータやメソッドを持つもの
そのほかにオブジェクトを作成せずに直にクラスに定義されたメソッドを呼び出す方法もある

キャメルケース
各単語や要素語の先頭を大文字にする記法

クラス定義
クラスを定義する時はクラスと書いた後にキャメルケースでクラス名を書き最後にendで閉じる
[1] pry(main)> class User
[1] pry(main)* end
=> nil
[2] pry(main)> User.new
=> #<User:0x00007fa610947768>

イニシャライズメソッド
オブジェクトが生成される際に自動で呼び出される
クラス内に定義したイニシャライズというメソッドは特別な意味を持ちオブジェクトが生成されるタイミングで自動的に呼ばれる
class Book
  def initialize
    ptus 'Initialize!!'
  end
end

Book.new


インスタンス変数
生成されたオブジェクトごとに持つ変数でオブジェクト内のメソッドから参照したり書き換えたりすることができる

rubyでは＠を先頭につけた変数名は特別な意味を持ちインスタンス変数として扱われる
bookオブジェクトからインスタンス変数にアクセスするにはインスタンス変数にアクセスするためのメソッドを用意しなければならない
class Book
  def initialize(name = '不明')
    @name = name //インスタンス変数
  end

//@nameを取得するためだけのメソッド@nameの中身を書き換えることはできない
//@nameの中身を書き換えるには書き換え用のメソッドを定義する必要がある
//name＝のメソッドを作成することで外の仮引数で代入する値を受け取りインスタンス変数に値をセットするメソッドを定義する
  def name 
    @nema 
  end

  def name=(new_name)
    @name = new_name
  end
end

book = Book.new
puts book.name
book.name = 'はじめてのRuby’
puts book.name



アクセサメソッド
これをインスタンス変数ごとに作成したら大量のメソッドが必要になってしまうので
rubyではアクセサメソッドという自動でインスタンス変数とインスタンス変数にアクセスするメソッドを用意してくれる機能がある。アクセサメソッドを使うとこれまでに書いたコードを簡潔に書くことができる
class Book
  attr_accessor :name
  def initialize(name = '不明')
    @name = name
  end
end

book = Book.new
puts book.name
book.name = 'はじめてのRuby'
puts book.name

initializeメソッドで値を初期化しないばいいはデフォルトでnilで初期化される
attr_accessorは指定したsymbol名のインスタンスの値を取得するメソッドと値を更新するメソッドを作る
class Book
  attr_accessor :name
end

book = Book.new
puts book.name
book.name = 'はじめてのRuby'
puts book.name

アクセサにはカンマ区切りで複数の属性を定義することができる
class Book
  attr_accessor :name,:pages   / /読み書き可能なメソッドを作成するアクセサ
  attr_reader :price  //読み取り可能なメソッドを作成するアクセサ
  attr_writer :sold   //書き込み可能なメソッドを作成するアクセサ
end

book = Book.new
puts book.name
book.name = 'はじめてのRuby'
puts book.name